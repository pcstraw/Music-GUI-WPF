[
  {
    "Id": "1317125",
    "ThreadId": "570763",
    "Html": "Proposed changes to remove magic strings and reflection. You have:<br />\n<pre><code>Call(&quot;OnScrollChanged&quot;, e);</code></pre>\n\nWhich is implemented as <br />\n<pre><code>private void Call(string methodName, object e)\n        {\n            foreach (var inputSubscriber in inputSubscribers)\n            {\n                // initialize provider\n                inputSubscriber.IsLeftButtonDown = isLeftMouseButtonDown;\n\n                MethodInfo methodInfo = typeof(InputSubscriberBase).GetMethod(methodName, BindingFlags.NonPublic | BindingFlags.Instance);\n                methodInfo.Invoke(inputSubscriber, new object[] { e });\n\n                RoutedEventArgs re = e as RoutedEventArgs;\n                if (re != null &amp;&amp; re.Handled) break;\n            }\n        }\n</code></pre>\n\nUgh. How about using delegates?<br />\n<pre><code>private void OnScrollChanged(object sender, ScrollChangedEventArgs e)\n        {\n            Call((sub, args) =&gt; sub.OnScrollChanged((ScrollChangedEventArgs) args), e);\n        }\n\n        private void OnMouseDown(object sender, MouseButtonEventArgs e)\n        {\n            Mouse.Capture(_TreeView, CaptureMode.SubTree);\n            _isLeftMouseButtonDown = true;\n            _mouseDownPoint = e.GetPosition(_TreeView);\n            Call((sub, args) =&gt; sub.OnMouseDown((MouseButtonEventArgs) args), e);\n        }\n\n        private void OnMouseMove(object sender, MouseEventArgs e)\n        {\n            _isLeftMouseButtonDown = e.LeftButton == MouseButtonState.Pressed;\n            Call((sub, args) =&gt; sub.OnMouseMove((MouseEventArgs) args), e);\n        }\n\n        private void OnMouseUp(object sender, MouseButtonEventArgs e)\n        {\n            Call((sub, args) =&gt; sub.OnMouseUp((MouseButtonEventArgs) args), e);\n            _isLeftMouseButtonDown = false;\n            Mouse.Capture(null);\n        }\n\n        private void Call(Action&lt;InputSubscriberBase, EventArgs&gt; handle, EventArgs e)\n        {\n            foreach (var inputSubscriber in _inputSubscribers)\n            {\n                inputSubscriber.IsLeftButtonDown = _isLeftMouseButtonDown;\n                handle(inputSubscriber, e);\n                var re = e as RoutedEventArgs;\n                if (re != null &amp;&amp; re.Handled) break;\n            }\n        }</code></pre>\n\nCompletely removes reflection based upon strings.<br />\n",
    "PostedDate": "2014-10-28T11:40:21.75-07:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]